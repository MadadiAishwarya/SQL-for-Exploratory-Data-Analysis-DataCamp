Count the categories:
-- Count rows with each priority 
SELECT priority,count(*)
  from evanston311
 group by priority;
 
-- Find values of zip that appear in at least 100 rows
-- Also get the count of each value
SELECT zip, count(*)
  FROM evanston311
 GROUP BY zip
HAVING count(*)>=100; 

-- Find values of source that appear in at least 100 rows
-- Also get the count of each value
SELECT source,count(*)
  FROM evanston311
 group by source
 having count(*)>=100;
 
 -- Find the 5 most common values of street and the count of each
SELECT street, count(*)
  FROM evanston311
 group by street
 order by count(*) desc 
 limit 5;
 
 
Spotting character data problems: There are sometimes extra spaces at the beginning and end of values


Trimming:
SELECT distinct street,
       -- Trim off unwanted characters from street
       trim(street, '0123456789 #/.') AS cleaned_street
  FROM evanston311
 ORDER BY street;
 
 
 Exploring unstructured text:
 -- Count rows
SELECT count(*)
  FROM evanston311
 -- Where description includes trash or garbage
 WHERE description ilike '%trash%'
    or description ilike '%garbage%';
    
  -- Select categories containing Trash or Garbage
SELECT category
  FROM evanston311
 -- Use LIKE
 WHERE category like '%Trash%'
    or category like '%Garbage%';
    
 -- Count rows
SELECT count(*)
  FROM evanston311 
 -- description contains trash or garbage
 WHERE (description ilike '%trash%'
    OR description ilike '%garbage%') 
 -- category does not contain trash or garbage
   AND category NOT LIKE '%Trash%'
   AND category NOT LIKE '%Garbage%';
   
  -- Count rows with each category
SELECT category, count(*)
  FROM evanston311 
 WHERE (description ILIKE '%trash%'
    OR description ILIKE '%garbage%') 
   AND category NOT LIKE '%Trash%'
   AND category NOT LIKE '%Garbage%'
 -- What are you counting?
 GROUP BY category
 --- order by most frequent values
 ORDER BY count(*) desc
 LIMIT 10;
 
 
 Concatenate strings:
-- Concatenate house_num, a space, and street
-- and trim spaces from the start of the result
SELECT ltrim(concat(house_num,' ',street)) AS address
  FROM evanston311;
  
  
 Split strings on a delimiter:
 -- Select the first word of the street value
SELECT split_part(street,' ',1) AS street_name, 
       count(*)
  FROM evanston311
 GROUP BY street_name
 ORDER BY count DESC
 LIMIT 20;
 
 
 Shorten long strings:
 -- Select the first 50 chars when length is greater than 50
SELECT CASE WHEN length(description) > 50
            THEN left(description, 50) || '...'
       -- otherwise just select description
       ELSE description
       END
  FROM evanston311
 -- limit to descriptions that start with the word I
 WHERE description like 'I %'
 ORDER BY description;
 
 
 Create an "other" category with CASE WHEN:
-- 2) Use a case when statement to group zip codes 
-- with zipcount less than 100 in an 'other' category
SELECT CASE WHEN zipcount < 100 THEN 'other' 
       -- Cases where count is at least 100 
       -- should remain the same zip value
       ELSE zip
       -- End the statement and name the column created
       -- by the case when statement
       END AS zip_recoded,
       -- 3) Sum counts by recoded zip codes to get the total 
       -- for the other category
       SUM(zipcount) AS zipsum
  -- 1) Write the subquery to get each zip code 
  -- and the count of requests as zipcount
  FROM (SELECT zip, count(*)  AS zipcount
          FROM evanston311
         GROUP BY zip) AS fullcounts
 -- 4a) Group by the recoded zip code column
 GROUP BY zip_recoded
 -- 4b) Order so that most frequent recoded zip codes are first
 ORDER BY zipsum desc;


Group and recode values:
-- Fill in the command below with the name of the temp table
DROP TABLE IF EXISTS recode;
-- Create and name the temporary table
CREATE temp table recode AS
-- Write the select query to generate the table 
-- with distinct values of category and standardized values
  SELECT DISTINCT category, 
         rtrim(split_part(category, '-', 1)) AS standardized
    -- What table are you selecting the above values from?
    FROM evanston311;
-- Look at a few values before the next step
SELECT DISTINCT standardized 
  FROM recode
 WHERE standardized LIKE 'Trash%Cart'
    OR standardized LIKE 'Snow%Removal%';
    
-- Code from previous step
DROP TABLE IF EXISTS recode;
CREATE TEMP TABLE recode AS
  SELECT DISTINCT category, 
         rtrim(split_part(category, '-', 1)) AS standardized
    FROM evanston311;
-- Update to group trash cart values
UPDATE recode 
   SET standardized='Trash Cart' 
 WHERE standardized like 'Trash%Cart';
-- Update to group snow removal values
UPDATE recode 
   set standardized='Snow Removal' 
 WHERE standardized like 'Snow%Removal%';
-- Examine effect of updates
SELECT DISTINCT standardized 
  FROM recode
 WHERE standardized LIKE 'Trash%Cart'
    OR standardized LIKE 'Snow%Removal%';
    
   SELECT DISTINCT category, 
         rtrim(split_part(category, '-', 1)) AS standardized
    FROM evanston311;
UPDATE recode SET standardized='Trash Cart' 
 WHERE standardized LIKE 'Trash%Cart';
UPDATE recode SET standardized='Snow Removal' 
 WHERE standardized LIKE 'Snow%Removal%';
-- Update to group unused/inactive values
UPDATE recode
   SET standardized='UNUSED' 
 WHERE standardized IN ('THIS REQUEST IS INACTIVE...Trash Cart', 
                '(DO NOT USE) Water Bill',
               'DO NOT USE Trash', 
               'NO LONGER IN USE');
-- Examine effect of updates
SELECT DISTINCT standardized 
  FROM recode
 ORDER BY standardized;
 
 -- Code from previous step
DROP TABLE IF EXISTS recode;
CREATE TEMP TABLE recode AS
  SELECT DISTINCT category, 
         rtrim(split_part(category, '-', 1)) AS standardized
  FROM evanston311;
UPDATE recode SET standardized='Trash Cart' 
 WHERE standardized LIKE 'Trash%Cart';
UPDATE recode SET standardized='Snow Removal' 
 WHERE standardized LIKE 'Snow%Removal%';
UPDATE recode SET standardized='UNUSED' 
 WHERE standardized IN ('THIS REQUEST IS INACTIVE...Trash Cart', 
               '(DO NOT USE) Water Bill',
               'DO NOT USE Trash', 'NO LONGER IN USE');
-- Select the recoded categories and the count of each
SELECT standardized, count(*)
-- From the original table and table with recoded values
  FROM evanston311 
       left JOIN recode  
       -- What column do they have in common?
       ON  evanston311.category=recode.category
 -- What do you need to group by to count?
 GROUP BY standardized
 -- Display the most common val values first
 ORDER BY count desc;
 
 
 Create a table with indicator variables:
 -- To clear table if it already exists
DROP TABLE IF EXISTS indicators;
-- Create the indicators temp table
CREATE TEMP TABLE indicators AS
  -- Select id
  SELECT id, 
         -- Create the email indicator (find @)
         CAST (description LIKE '%@%' AS integer) AS email,
         -- Create the phone indicator
         CAST (description LIKE '%___-___-____%' AS integer) AS phone 
    -- What table contains the data? 
    FROM evanston311;
-- Inspect the contents of the new temp table
SELECT *
  FROM indicators;
  
  -- To clear table if it already exists
DROP TABLE IF EXISTS indicators;
-- Create the temp table
CREATE TEMP TABLE indicators AS
  SELECT id, 
         CAST (description LIKE '%@%' AS integer) AS email,
         CAST (description LIKE '%___-___-____%' AS integer) AS phone 
    FROM evanston311;
  
-- Select the column you'll group by
SELECT priority,
       -- Compute the proportion of rows with each indicator
       sum(email)/count(*)::numeric AS email_prop, 
       sum(phone)/count(*)::numeric AS phone_prop
  -- Tables to select from
  FROM evanston311
       left JOIN indicators
       -- Joining condition
       ON evanston311.id=indicators.id
 -- What are you grouping by?
 GROUP BY priority;
